name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - can-cicd

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Set up environment variables
      run: |
        echo "FLASK_APP=${{ secrets.FLASK_APP }}" >> $GITHUB_ENV
        echo "FLASK_DATABASE_URI=${{ secrets.FLASK_DATABASE_URI }}" >> $GITHUB_ENV
        echo "FLASK_SQLALCHEMY_TRACK_MODIFICATIONS=${{ secrets.FLASK_SQLALCHEMY_TRACK_MODIFICATIONS }}" >> $GITHUB_ENV
        echo "FLASK_DEBUG=${{ secrets.FLASK_DEBUG }}" >> $GITHUB_ENV
        echo "FLASK_TESTING=${{ secrets.FLASK_TESTING }}" >> $GITHUB_ENV
        echo "FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}" >> $GITHUB_ENV
        echo "COREO_API_KEY=${{ secrets.COREO_API_KEY }}" >> $GITHUB_ENV
        echo "ADMIN_CREDENTIALS_EMAIL=${{ secrets.ADMIN_CREDENTIALS_EMAIL }}" >> $GITHUB_ENV
        echo "ADMIN_CREDENTIALS_PW=${{ secrets.ADMIN_CREDENTIALS_PW }}" >> $GITHUB_ENV

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        poetry install

    - name: Build .whl package
      run: poetry build

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ghcr.io/tag-a-bird/backend:latest

    - name: Create ssh-add-pass.sh script
      run: |
        echo '#!/bin/sh' > ssh-add-pass.sh
        echo 'echo $PRIVATE_KEY_PASSPHRASE' >> ssh-add-pass.sh
        chmod +x ssh-add-pass.sh
    - name: Start SSH agent
      run: |
        eval "$(ssh-agent -s)"
        echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
        echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV

    - name: Add SSH key to agent
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        PASSPHRASE: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }}
      run: |
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key
        printf "%s\n" "$PASSPHRASE" | ssh-add private_key
        rm -f private_key
    - name: Decode SSL certificates
      run: |
        echo "${{ secrets.SSL_CERT }}" | base64 -d > nginx/ssl/certificate.crt
        echo "${{ secrets.SSL_KEY }}" | base64 -d > nginx/ssl/private.key

    - name: Add remote server to known hosts
      run: |
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts
        echo "$(echo ${{ secrets.DIGITALOCEAN_IP }}) $(ssh-keyscan ${{ secrets.DIGITALOCEAN_IP }})" >> ~/.ssh/known_hosts

    - name: Deploy to DigitalOcean VM
      run: |
        echo "$PRIVATE_KEY" > /tmp/private_key
        chmod 600 /tmp/private_key
        scp -r -o StrictHostKeyChecking=no -i /tmp/private_key -P 22 nginx ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_IP }}:/root/nginx
        scp -r -o StrictHostKeyChecking=no -i /tmp/private_key -P 22 dist ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_IP }}:/root/dist
        scp -o StrictHostKeyChecking=no -i /tmp/private_key -P 22 docker-compose.yml ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_IP }}:/root/
        scp -o StrictHostKeyChecking=no -i /tmp/private_key -P 22 dockerfile ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_IP }}:/root/
        ssh -o StrictHostKeyChecking=no -i /tmp/private_key -p 22 ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_IP }} 'sudo fuser -k 443/tcp'
        ssh -o StrictHostKeyChecking=no -i /tmp/private_key -p 22 ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_IP }} 'cd /root && docker-compose up -d'
        rm -f /tmp/private_key
